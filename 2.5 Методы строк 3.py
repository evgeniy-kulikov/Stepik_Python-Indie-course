# 2.5 Методы строк 3
""""""
"""
Метод strip
Метод .strip  имеет следующий шаблон вызова:
S.strip([chars])
Метод  .strip возвращает копию строки, удаляя как начальные, 
так и конечные символы (в зависимости от переданного строкового аргумента). 
Метод удаляет символы как слева, так и справа в зависимости от аргумента "chars" . 
Если аргумент "chars" не передан, 
то по умолчанию удаляться пробелы и символы переноса на новую строку \n.

q = '    hello    '
print(q)                '    hello    '
print(q.strip())        'hello'
print('\n\n\n_USB_\n\n\n\n'.strip())        _USB_
print('123_USB_123'.strip('123'))           _USB_


Метод rstrip
Метод .rstrip  имеет следующий шаблон вызова:
S.rstrip([chars])
Метод  .rstrip возвращает копию строки, 
в которой справа удалены указанные символы (по умолчанию удаляются пробельные символы).

q = '    hello    '
print(q)                '    hello    '
print(q.rstrip())       '    hello'
print('\n\n\n_USB_\n\n\n\n'.rstrip())               _USB_
print('123_USB_123'.rstrip('123'))                  123_USB_
print('321232321_USB_31121312'.rstrip('123'))       321232321_USB_
print('321232321_USB_12344121312'.rstrip('123'))    321232321_USB_12344


Метод lstrip
Метод .lstrip  имеет следующий шаблон вызова:
S.lstrip([chars])
Метод  .lstrip возвращает копию строки, 
в которой слева удалены указанные символы (по умолчанию удаляются пробельные символы).

q = '    hello    '
print(q)                '    hello    '
print(q.lstrip())       'hello    '
print('\n\n\n_USB_\n\n\n\n'.lstrip())           _USB_
print('123_USB_123'.rstrip('123'))              _USB_123
print('321232321_USB_31121312'.lstrip('123'))   _USB_31121312


Метод partition
Метод .partition  имеет следующий шаблон вызова:
S.partition(sep)
Метод  .partition разбивает строку по указанному разделителю и возвращает кортеж из трех элементов: 
строка до разделителя, сам разделитель и строка после разделителя. 
Если разделитель не найден, то возвращается кортеж так же состоящий из трех элементов 
в котором первый элемент – это исходная строка S, а два других элемента – это пустые строки.

text = "Python is best"
print(text.partition('is '))        ('Python ', 'is ', 'best')
print(text.partition('not '))       ('Python is best', '', '')

s = "Python is best, isn't it"
print(s.partition('is'))            ('Python ', 'is', " best, isn't it")



Метод rpartition
Метод .rpartition  имеет следующий шаблон вызова:
S.rpartition(sep)
Метод  .rpartition разбивает строку по последнему встреченному разделителю "sep" и возвращает кортеж, 
который состоит из трех элементов: строки до разделителя, самого разделителя и строки после разделителя. 
Если разделитель в строке отсутствует, то кортеж будет состоять из: двух пустых строк и исходной строки.

text = "Python is best"
print(text.rpartition('is '))       ('Python ', 'is ', 'best')
print(text.rpartition('not '))      ('', '', 'Python is best')

s = "Python is best, isn't it"
print(s.rpartition('is'))           ('Python is best, ', 'is', "n't it")
"""


"""
Вводится строка, которая может быть окружена символами -, _, !, ?
Ваша задача избавиться от символов -, _, !, ? и вывести полученную строку
Input:  !-!!World?!??_????
Output:  World
"""
s = input()
print(s.strip("-_!?"))


"""
https://stepik.org/lesson/818712/step/9?thread=solutions&unit=822093
Программе поступают последовательно три числа: 
значения оттенка красного, потом зеленого и затем синего цветов. 
Данные числа варьируются от 0 до 255 включительно.
Закодировать оттенки цветов согласно RGB модели.  
Символы букв в шестнадцатеричной системе необходимо записывать в верхнем регистре
Input:  0
        255
        10
Output: #00FF0A
"""
r, g, b = hex(int(input())), hex(int(input())), hex(int(input()))
r = r.lstrip("0x").upper().zfill(2)
g = g.lstrip("0x").upper().zfill(2)
b = b.lstrip("0x").upper().zfill(2)
print(f"#{r}{g}{b}")
