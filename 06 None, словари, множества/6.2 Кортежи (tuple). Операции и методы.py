# 6.2 Кортежи (tuple). Операции и методы кортежей
""""""

"""
Кортеж (tuple) – неизменяемая упорядоченная последовательность, 
обычно используемая для хранения разнотипных объектов.  
Кортеж очень напоминает список, но только кортеж является неизменяемым типом данных.
"""

""" Варианты создания кортежа """

# 1 - с помощью перечисления элементов в круглых скобках:
a = (1, 2, 3, 4, 5)
b = ('hello', 45, True)

# 2- Пропустить круглые скобки и записать объекты через запятую:
c = 1, 2, 3, 4, 5
d = 'hello', 45, True

# Но, если нужно создать кортеж из одного элемента, то нужно обязательно указать запятую после этого элемента:
e = 1,
f = (1,)

# 3 - При помощи функции tuple()
k = tuple(range(5))  # (0, 1, 2, 3, 4)
n = tuple('hello')  # ('h', 'e', 'l', 'l', 'o')

ls = ['hello', 45, True]
m = tuple(ls)  # ('hello', 45, True)

""" Операции с кортежами """

# Нахождение длины кортежа
ab = 1, 2, 3, 4, 5
len(ab)  # 5

empty = ()
len(empty)  # 0

# Проверка на нахождение
ac = 1, 2, 3, 4, 5
print(2 in ac)  # True
print(7 in ac)  # False
print(6 not in ac)  # True

#  Сложение кортежей
i = 1, 2, 3, 4, 5
o = (6, 7, 8)

ac = i + o  # (1, 2, 3, 4, 5, 6, 7, 8)
ad = o + i  # (6, 7, 8, 1, 2, 3, 4, 5)

# Дублирование кортежей
ae = 1, 2, 3
print(ae * 2)  # (1, 2, 3, 1, 2, 3)

print(('a', 'b', 'c') * 3)  # ('a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c')

# Поиск максимума и минимума
af = 1, 2, 3, 4, 5
min(af)  # 1
max(af)  # 5

# Суммирование элементов кортежа
aj = 1, 2, 3, 4, 5
sum(aj)  # 15

ak = tuple(range(200, 301))
sum(ak)  # 25250

#  *  *  *   Задачи   *  *  *

"""
среднее арифметическое всех элементов кортежа my_tuple
"""
from statistics import mean

my_tuple = (-214, 181, -139, 448, -664, -66, 213, 832, 717, -462, -924, -706, -85, -244, -222, -340, -482, -518,
            -781, 759, -593, 905, -354, -377, -141, -742, 383, -381, 109, -639, -480, -810, -686, 892, -612, 696,
            993, 791, 631, -493, -218, -829, -275, 619, -628, -241, -565, -835, -69, 747, 711, -252, -811, -407,
            -153, 904, 933, -254, 307, -493, -419, -109, -543, 155, -127, 613, -452, -459, 856, 562, 333, -66, -77,
            -598, -779, -278, 867, 321, -20, -415, -357, 735, -906, -14, -370, 453, -630, -736, -830, -917, 32,
            422, -895, 198, 284, 472, -986, -964, -73, 29)
print(mean(my_tuple))


"""
При помощи операций сцепления и дублирования сохраните в переменной result следующий кортеж 
"""
a = (1,)
b = ('R',)
c = ('A',)
d = (2,)

result = a * 3 + b * 5 + c * 8 + d * 5
print(result)
#  (1, 1, 1, 'R', 'R', 'R', 'R', 'R', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 2, 2, 2, 2, 2)


"""
Вывести кортеж, содержащий натуральные числа в интервале [a; b]
Input:  8
        11
Output: (8, 9, 10, 11)
"""
a, b = int(input()), int(input())
result = tuple(range(a, b + 1))
print(result)


"""
Вывести кортеж, содержащий нечетные натуральные числа в интервале  [ n; n ** 2]
Input:  5
Output: (5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25)
"""
n = int(input())
result = tuple([el for el in range(n, n ** 2 + 1) if el % 2 != 0])
print(result)

