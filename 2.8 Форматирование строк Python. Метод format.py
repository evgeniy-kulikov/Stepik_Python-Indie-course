""" 2.8 Форматирование строк Python. Метод format """

"""
Форматирование строк
Попробуем воспользоваться методом строки, которая называется format . 
Мы его вызываем после нашей строки и передаём ему наши три переменные, в том порядке, 
в котором они появляются в нашей строке. 
Также в самой строке в фигурных скобках указываем порядковые номера переменных, 
которые находятся в скобках.
"""
name = 'Семён'
mid_name = 'Семёнов'
balance = 32.56
text = """Дорогой {0} {1}, 
баланс Вашего лицевого счёта составляет {2} руб.""".format(name, mid_name, balance)
print(text)

"""
Второй вариант использования формата - это именованное использование переменных. 
Вместо индексов проставляются имена переменных.
"""
name = 'Семён'
mid_name = 'Семёнов'
balance = 32.56
text = """Дорогой {name} {mid_name}, 
баланс Вашего лицевого счёта составляет {balance} руб.""".format(mid_name=mid_name, name=name, balance=balance)
print(text)


"""
Напишите программу, которая считывает слово, затем выводит:
«Что Вы сказали? [это слово] ? Какое интересное слово».
Input:  выхухоль
Output: Что Вы сказали? выхухоль? Какое интересное слово
"""
w = input()
s = "Что Вы сказали? {0}? Какое интересное слово".format(w)
s2 = "Что Вы сказали? {word}? Какое интересное слово".format(word=w)
print(s)


"""
Программа запрашивает у пользователя имя и фамилию, после чего выводит приветственное сообщение в следующем формате
«Здравствуйте, <фамилия> <имя>!»
Input:  Никита
        Рассказов
Output: Здравствуйте, Рассказов Никита!
"""
name, surname = input(), input()
s = "Здравствуйте, {surname} {name}!".format(surname=surname, name=name)
print(s)


"""
Напишите программу, которая считывает целое число, 
и затем сообщает какие числа будут следующим и предыдущим в определенном формате. 
Пробелы, знаки препинания, заглавные и строчные буквы важны!
Input:  99
Output: Для числа 99 предыдущим будет число 98.
        Для числа 99 следующим будет число 100.
"""
n = int(input())
s1 = "Для числа {n} предыдущим будет число {prev_n}.".format(n=n, prev_n=n - 1)
s2 = "Для числа {n} следующим будет число {next_n}.".format(n=n, prev_n=n - 1, next_n= n + 1)
print(s1, s2, sep="\n")
