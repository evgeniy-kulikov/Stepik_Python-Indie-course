# 4.2 Закрепляем while. Задачи посложнее
""""""

# Отложенные решения на отпуск (05)
#  https://stepik.org/lesson/625516/step/2?unit=621274
"""
Пользователь вводит целые числа по одному в строке, последовательность оканчивается числом 0. 
Все, что вводится после 0 не относится к последовательности. 
Напишите программу, которая выводит сумму всех членов данной последовательности.
Input:  1
        2
        3
        0
        5
        6
Output: 6
"""
flag = True
m = 0
while flag:
    n = int(input())
    if n != 0:
        m += n
    else:
        flag = False
print(m)


# Отложенные решения на отпуск (06)
#  https://stepik.org/lesson/625516/step/3?unit=621274
"""
На каждой отдельной строчке пользователь вводит друг за другом пароли в виде строки символов. 
Валидными паролями будем считать строки, у которых длина варьируется от 5 до 9 символов включительно. 
Как только вы встретите первый невалидный пароль, ваша программа должна закончить считывать пароли
и вывести последний введенный валидный пароль.
Гарантируется, что первый пароль всегда валидный
Input:  QWERTY
        12345
        21.08.90
        Кодзима-гений
        Телепузик
Output: 21.08.90
"""
flag = True
res = ""
while flag:
    psw = input()
    if 4 < len(psw) < 10:
        res = psw
    else:
        flag = False
print(res)


# Отложенные решения на отпуск (07)
#  https://stepik.org/lesson/625516/step/4?unit=621274
"""
У нас в наличии рюкзак, вместимость которого составляет "n" литров, 
и наша задача забить его до предела максимально возможно. 
Нам поступают вещи, объем которых измеряется также в литрах, 
и мы должны их складывать в наш рюкзак без возможности пропуска. 
Как только суммарный объем новой добавляемой вещи превысит вместимость рюкзака, 
ваша программа должна вывести слово "Довольно!" и затем на отдельных строчках суммарный объем вещей, 
которые мы смогли упаковать в рюкзак, и их количество
Input:  2000
        900
        800
        700
        500
        200
        1000
Output: Довольно!
        1700
        2
"""
volume = int(input())
things, cnt = 0, 0


while True:
    unit = int(input())
    if things + unit <= volume:
        things += unit
        cnt += 1
    else:
        break

print('Довольно!', things, cnt, sep='\n')


# Отложенные решения на отпуск (08)
#  https://stepik.org/lesson/625516/step/5?unit=621274
"""
В первой строке входных данных записаны два целых числа n и k (1 <= n <= 10, 1 <= k <= 240)
количество задач в соревновании и количество минут, на дорогу до места.
Время на решение задач: задача 1 будет самой лёгкой, а задача номер n — самой сложной. 
Потребуется 5* i минут на решение i-й задачи.
Сколько максимум задач может успеть решить, чтобы не опоздать доехать до места?
Время на дорогу и решение задач = 240 мин.  Время на дорогу = k, время для решения = 240 - k
Input:  3 222
Output: 2

Input:  4 190
Output: 4

Input:  7 1
Output: 7
"""

# (n) task - кол-во нужных задач,
# (k) road - время на дорогу
task, road = map(int, input().split())
cnt = 0  # Кол-во задач, которые можно успеть сделать
time = 240 - road  # Время оставшееся на решение задач

while time > 0 and cnt < task:
    cnt += 1
    time -= 5 * cnt
    if time < 5 * (cnt + 1):  # Если на следующую задачу времени нет...
        break

print(cnt)


# Отложенные решения на отпуск (09)
# https://stepik.org/lesson/625516/step/6?unit=621274
"""
Нужно построить пирамиду следующим образом: на верхушке пирамиды должен находиться 1 кубик, 
на втором уровне: 1 + 2 = 3  кубика, на третьем: 1 + 2 + 3 = 6 кубиков, и так далее. 
Таким образом, на i-м уровне пирамиды должно располагаться 1 + 2 + 3 + ... + (n - 1) + n  кубиков.
Какой максимальной высоты можно построить пирамиду с использованием имеющихся кубиков  n
Input:  1
Output: 1

Input:  25
Output: 4

Input:  6560
Output: 33
"""

#  1  3  6  10  15  21  28  36  # кол-во кубиков на уровне
#  1  4  10 20  35  56  84 120  # кол-во кубиков на всех уровнях

num = int(input())  # кубики для пирамиды
h = 0  # высота
cube_level = 0  # кол-во кубиков на уровне
cube_summ = 0  # кол-во кубиков всего на уровнях
while cube_summ < num:
    h += 1
    cube_level += h
    cube_summ += cube_level
if cube_summ == num:
    print(h)
else:
    print(h - 1)


# Решение уже выложено
# https://stepik.org/lesson/625516/step/7?unit=621274
"""
В вашем распоряжении имеется два отсортированных списка по неубыванию элементов, 
состоящих из 'n'  и  'm' элементов
Задача слить их в один отсортированный список размером  n + m
P.S: пользоваться встроенной сортировкой запрещено
Input:  2 3
        3 9
        2 3 6
Output: 2 3 3 6 9

Input:  6 8
        1 3 4 5 6 10
        1 1 1 3 5 7 9 10
Output: 1 1 1 1 3 3 4 5 5 6 7 9 10 10
"""
# len1, len2 = 2, 3
# ls1 = [2, 3]
# ls2 = [2, 3, 6]

# Метод двух указателей
len1, len2 = map(int, input().split())
ls1 = list(map(int, input().split()))
ls2 = list(map(int, input().split()))
res = []
idx1, idx2 = 0, 0

while idx1 < len1 and idx2 < len2:
    if ls1[idx1] < ls2[idx2]:
        res.append(ls1[idx1])
        idx1 += 1
    else:
        res.append(ls2[idx2])
        idx2 += 1

if idx1 < len1:
    res += ls1[idx1:]
if idx2 < len2:
    res += ls2[idx2:]

print(*res)


# Переработанное решение
# while len(ls1) > 0 and len(ls2) > 0:
while ls1 and ls2:
    if ls1[0] < ls2[0]:
        res.append(ls1.pop(0))
    else:
        res.append(ls2.pop(0))

res += ls1 + ls2

print(*res)


# Отложенные решения на отпуск (10)
# https://stepik.org/lesson/625516/step/8?unit=621274
"""
На бал будут приглашены несколько пар юноша-девушка, 
причем уровень умений танцевать партнеров в каждой паре должен отличаться не более чем на единицу.
Для каждого юноши известен уровень его умения танцевать. 
Аналогично, для каждой девушки известен уровень ее умения танцевать. 
Необходимо определит наибольшее количество пар, которое можно образовать из n юношей и m девушек.
Входные данные:
В первой строке записано целое число n (от 1 до 100) — количество юношей. 
Вторая строка содержит последовательность a1,a2,...,an (ai от 1 до 100), где ai — умение танцевать i-го юноши.
Аналогично, третья строка содержит целое m (от 1 до 100) – количество девушек. 
В четвертой строке содержится последовательность b1,b2,...,bm (bj  от 1 до 100), где bj — умение танцевать j-й девушки.
Input:  4
        1 4 6 2
        5
        5 1 5 7 9
Output: 3
Пояснение: можно сочетать к примеру так 1-1, 4-5, 6-7 или 2-1, 4-5, 6-7. В любом случае можно составить только 3 пары
"""

len_ls1 = int(input())  # В данном решении не используется
ls1 = list(map(int, input().split()))
len_ls2 = int(input())  # В данном решении не используется
ls2 = list(map(int, input().split()))
cnt = 0

ls1.sort()
ls2.sort()
while ls1 and ls2:
    if abs(ls1[0] - ls2[0]) < 2:
        cnt += 1
        ls1.pop(0)
        ls2.pop(0)
    else:
        if ls1[0] < ls2[0]:
            ls1.pop(0)
        else:
            ls2.pop(0)

print(cnt)


# Метод двух указателей
len_ls1 = int(input())
ls1 = list(map(int, input().split()))
len_ls2 = int(input())
ls2 = list(map(int, input().split()))
idx1, idx2, cnt = 0, 0, 0
ls1.sort()
ls2.sort()
while idx1 < len_ls1 and idx2 < len_ls2:
    if abs(ls1[idx1] - ls2[idx2]) < 2:
        cnt += 1
        idx1 += 1
        idx2 += 1
    else:
        if ls1[idx1] < ls2[idx2]:
            idx1 += 1
        else:
            idx2 += 1

print(cnt)
