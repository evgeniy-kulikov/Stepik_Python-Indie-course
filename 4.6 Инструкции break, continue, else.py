# 4.6 Инструкции break, continue, else
""""""

"""
Оператор break используется для принудительного выхода из цикла. 
Цикл прерывается без ошибок и дальше программа сразу переходит к выполнению инструкций, 
которые следуют за циклом while. 
Следует отметить, что break выходит из цикла целиком и если в цикле были инструкции, 
расположенные ниже команды, то они выполнены не будут.
"""
a = 1
while a > 0:
    print(a, end=' ')
    if a == 5:
        break
    a += 1
# 1 2 3 4 5

"""
Инструкция continue
Позволяет перейти к следующей итерации цикла до завершения всех команд в данном цикле. 
В этом коде каждый раз когда a является нечетным числом 
continue прерывает текущую итерацию и отправляет нас к следующей
"""
a = 0
while a <= 10:
    a += 1
    if a % 2 != 0:
        continue
    print(a, end=' ')  # 2 4 6 8 10

"""
Инструкция else
Она позволяет выполнить блок определенного кода, 
если цикл заканчивается без принудительного выхода.

Для примера узнаем состоит ли список a только из чётных цифр и выведем No или Yes.
В примере мы увидели вывод слова No, так как наш цикл закончился принудительно.  
Когда срабатывает инструкция break блок else будет пропущен.
"""
a = [24, 42, 23, 18, 22]
while len(a) > 0:
    last = a.pop()
    if last % 2 != 0:
        print('No')
        break
    print(last, end=' ')
else:
    print('Yes')
# 22 18 No

"""
А вот в примере ниже мы зайдем в блок else, потому что break не сработает
"""
a = [24, 42, 20, 18, 22]
while len(a) > 0:
    last = a.pop()
    if last % 2 != 0:
        print('No')
        break
    print(last, end=' ')
else:
    print('Yes')
# 22 18 20 42 24 Yes


#  *  *  *   Задачи   *  *  *


# Отложенные решения на отпуск (22)
# https://stepik.org/lesson/296956/step/4?unit=278684
"""
Программа получает на вход натуральное число n > 1. 
Выведите минимальный делитель этого числа, отличный от единицы.
Input:  15
Output: 3
"""
num = int(input())
div = 2
while div <= num:
    if num % div == 0:
        print(div)
        break
    div += 1


# Отложенные решения на отпуск (23)
# https://stepik.org/lesson/296956/step/5?unit=278684
"""
Перебрать все числа от а до b включительно и вывести их на экран, 
при этом нужно выполнить следующие условия:
пропускать (не выводить) числа, которые делятся на 2 или на 3
если встречаете число, кратное 777, необходимо принудительно закончить цикл, само это число не выводить
Цикл 'for' не использовать
Вводится два натуральных числа a и b в отдельных строках. Гарантируется, что a < b.
Вывести все числа на интервале от a до b включительно согласно условиям.
Input:  1
        7
Output: 1
        5
        7
"""
a, b = int(input()), int(input())

while a <= b:
    if a == 777:
        break
    if a % 2 == 0 or a % 3 == 0:
        a += 1
        continue
    print(a)
    a += 1


# Отложенные решения на отпуск (24)
# https://stepik.org/lesson/296956/step/6?unit=278684
"""
Сиракузская последовательность, или последовательность Коллатца.
Input:  10
Output: 6
"""
num = int(input())
cnt = 0
while num != 1:
    if num % 2 == 0:
        num /= 2
    else:
        num = num * 3 + 1
    cnt += 1
print(cnt)


# Отложенные решения на отпуск (25)
# https://stepik.org/lesson/296956/step/10?unit=278684
"""
На вход поступает слово. В цикле while обойти все его буквы и распечатать их в формате фразы:
«Текущая буква: <letter>».
Если встретятся строчные английские буквы «e» или «a» нужно вывести фразу «Ага! Нашлась», 
перестать печатать буквы и принудительно выйти из цикла.
В случае, если в слове не оказалось букв «e» или «a» необходимо вывести фразу «Распечатали все буквы»
Input:  phrase
Output: Текущая буква: p
        Текущая буква: h
        Текущая буква: r
        Ага! Нашлась
"""
st = input()
len_st = len(st)
i = 0

while i < len_st:
    if st[i] in 'ea':
        print('Ага! Нашлась')
        break
    else:
        print(f'Текущая буква: {st[i]}')
    i += 1
else:
    print('Распечатали все буквы')

