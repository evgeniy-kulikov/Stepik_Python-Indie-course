#  5.9 Генераторы списков Python | List comprehension
""""""


"""
Генераторы списка строятся по следующему шаблону:
[выражение for переменная in последовательность]

a = [0 for i in range(7)]  # [0, 0, 0, 0, 0, 0, 0]

a = [i for i in range(10)]  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

a = [i ** 2 for i in range(10)]  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

a = [i % 4 for i in range(4, 16)]  # [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]


Так же можно обходить и другие итерабельные объекты: строки, списки и т.д.
a = [i for i in "hello"]  # ['h', 'e', 'l', 'l', 'o']

можно использовать другие функции
a = [ord(i) for i in "hello"]  # [104, 101, 108, 108, 111]


В качестве выражения могут выступать и функции из модулей

from random import randint
a = [randint(-10, 10) for i in range(10)]  # [-6, -8, 2, 6, -2, 2, 10, 1, -10, -8]
b = [abs(elem) for elem in a]  # [6, 8, 2, 6, 2, 2, 10, 1, 10, 8]
c = [elem+1 for elem in a]     # [7, 9, 3, 7, 3, 3, 11, 2, 11, 9]
"""

"""
Условный оператор в генераторе списка 

[выражение for переменная in последовательность if условие] 

a = [randint(-10, 10) for i in range(10)]  # [-3, -6, -8, -10, -1, -5, 0, 2, -8, 2]
b = [elem for elem in a if elem % 2 == 0]  # [-6, -8, -10, 0, 2, -8, 2]
c = [elem for elem in a if elem % 2==0 and elem >= 0]  # [0, 2, 2]
"""


"""
Генератор списка с несколькими условиями if и else

lst = [1, 2, 3, 4, 5, 6, 7, 8]

ls = [el if el > 4 else 'мало' for el in lst]  
# ['мало', 'мало', 'мало', 'мало', 5, 6, 7, 8]

ls_2 = [el if el > 4 else 'мало' for el in (lst if lst[0] == 8 else lst[:: -1])]
# [8, 7, 6, 5, 'мало', 'мало', 'мало', 'мало']
"""


"""
Считывание данных при помощи генератора списка (вводим несколько чисел через пробел через)
a = "3 1 4"
a = a.split()  # ['3', '1', '4']
b = [int(i) for i in a]  # [3, 1, 4]

в одну строчку все эти преобразования можно записать вот так
b = [int(num) for num in input().split()]
"""

"""
Вложенные циклы в генераторе списка
a = [(i, j) for i in 'abc' for j in [1, 2, 3]]
#  [('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1), ('c', 2), ('c', 3)]

Такие вложенные циклы внутри генератора можно сопровождать какими-либо условиями:
a = [i * j for i in [2, 3, 4, 5] for j in [1, 2, 3] if i * j >= 10]  # [12, 10, 15]
"""


"""
Создание матрицы при помощи генератора списка
n, m = 3, 4
a = [[0] * m for i in range(n)]  
# [[0, 0, 0, 0], 
  [0, 0, 0, 0], 
  [0, 0, 0, 0]]

a[1][2] = 100
# [0, 0, 0, 0]
  [0, 0, 100, 0]
  [0, 0, 0, 0]

эта операция делает дублирование списка. 
Все ваши внутренние списки ссылаются на один и тот же объект, 
поэтому изменяя значение в одном месте, вы измените значение во всех других.
n, m = 3, 4
a = [[0] * m] * n
# [[0, 0, 0, 0], 
  [0, 0, 0, 0], 
  [0, 0, 0, 0]]
    
a[1][2] = 100
# [0, 0, 100, 0]
  [0, 0, 100, 0]
  [0, 0, 100, 0]
"""


#  *  *  *   Задачи   *  *  *


"""
При помощи генератора-списка сохраните в переменной zeroes список из 100 нулей.
"""
zeroes = [ 0 for _ in range(100)]


"""
При помощи генератора-списка создайте список [1, 2, 3, ..., n], само натуральное число n будет поступать на вход
Input:  5
Output: [1, 2, 3, 4, 5]
"""
n = int(input())
ls = [el for el in range(1, n + 1)]
print(ls)


"""
На вход программе подается натуральное число n (n<=1000). 
При помощи list comprehension создайте список, состоящий из делителей введенного числа и выведите его на экран
Input:  4
Output: [1, 2, 4]
"""
n = int(input())
ls = [el for el in range(1, n + 1) if n % el == 0]
print(ls)


"""
Вывести список, содержащий нечетные натуральные числа в интервале  [n; n ** 2]
Input:  4
Output: [5, 7, 9, 11, 13, 15]
"""
n = int(input())
ls = [el for el in range(n, n ** 2 + 1) if el % 2 != 0]
print(ls)


"""
Программа принимает на вход два целых числа a и b.
Если a <= b необходимо сформировать список квадратов целых чисел 
на интервале от а до b включительно и вывести его на экран.
Если же a  > b, необходимо сформировать список кубов целых чисел на интервале от a до b включительно, 
двигаясь в порядке убывания, и затем вывести его.
Input:  1 5
Output: [1, 4, 9, 16, 25]
Input:  3 1
Output: [27, 8, 1]
"""
a, b = map(int, input().split())
ls = [el ** 2 if a <= b else el ** 3 for el in (range(a, b + 1) if a <= b else range(a, b - 1, -1))]
print(ls)

# Вариант
# В выражении or работает логика: "если результат существует (то есть не пустое значение и не ноль),
# то вернуть его, или вывести второе (правое) значение",
# а там уже какое есть, пустое, не пустое (в т.ч и пустой список[] если он будет во втором выражении)
# Одновременно два ответа при этом, естественно, не выдаст никогда.
a, b = map(int, input().split())
print([i**2 for i in range(a, b + 1)] or [i**3 for i in range(a, b - 1, -1)])


"""
Создайте список первых букв каждого слова из строки st 
st = 'Create a list of the first letters of every word in this string'
"""
st = 'Create a list of the first letters of every word in this string'
ls = [el[0] for el in st.split()]
print(ls)


"""
создайте список, состоящий из первых n заглавных букв английского алфавита ['A', 'B', 'C', 'D', ...]. 
Получить все заглавные буквы английского алфавита можно следующим образом:
from string import ascii_uppercase
print(ascii_uppercase) # выведет строку ABCDEFGHIJKLMNOPQRSTUVWXYZ
На вход программе подается натуральное число n, n <= 26.
Input:  3
Output: ['A', 'B', 'C']
"""
from string import ascii_uppercase
n = int(input())
ls = [ascii_uppercase[el] for el in range(n)]
print(ls)


"""
усовершенствуем предыдущую задачу так, чтобы получался следующий список букв:
['A', 'BB', 'CCC', 'DDDD', 'EEEEE', 'FFFFFF', ...]
Input:  3
Output: ['A', 'BB', 'CCC']
"""
from string import ascii_uppercase
n = int(input())
ls = [ascii_uppercase[el] * (el + 1) for el in range(n)]
print(ls)


"""
При помощи генератора-списков создайте список, состоящий из слов,  начинающихся с буквы 't' или 'T'. 
Слова возьмите из переменной
phrase = 'Take only the words that start with t in this sentence'
"""
phrase = 'Take only the words that start with t in this sentence'
ls = [el for el in phrase.split() if el[0] in 'Tt']
print(ls)

