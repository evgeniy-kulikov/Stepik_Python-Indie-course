# 10.1 Выражения-генераторы
""""""

"""
Общая форма объявления и использования выражения-генератора следующая
IterObj = ( expression for variable in sequence [if condition] )

IterObj – итерированный объект, поддерживающий протокол итераций. Такой объект содержит список значений, 
которые будут получаться в вызывающем коде по требованию с помощью метода next();
expression – выражение, формирующее последовательность новых значений;
variable – переменная-счетчик, которая поочередно принимает значения из последовательности sequence;
condition – условное выражение. Это случай, когда последовательность значений формируется согласно некоторому условию.
"""
"""
Выражение-генератор обеспечивает создание объекта-генератора, поставляющего по одному элементу из последовательности. 
При обращении к объекту-генератору за следующим элементом каждый элемент извлекается из набора 
и уже не размещается в этом наборе. 
Извлечение элемента из объекта-генератора может производиться в цикле for автоматически 
или с помощью вызова метода next().
"""

"""
Операция, которые выражения-генераторы не поддерживают:
- К выражениям-генераторам нельзя применять функцию len(), т.е. нельзя найти длину этой последовательности.
- К ним невозможно применить индекс
- К выражениям-генераторам нельзя применять функцию reversed(d)
"""

#
#  *  *  *   Задачи   *  *  *
#


# 01
"""
В переменную from_10_to_20 при помощи генератора-выражения 
сохраните последовательность от 10 до 20 включительно
Затем при помощи функции next выведите первые три элемента
И остается вывести оставшиеся элементы в цикле
"""
# Создайте генератор
from_10_to_20 = (el for el in range(10, 21))

# Распечатайте три первых значения
print(next(from_10_to_20))
print(next(from_10_to_20))
print(next(from_10_to_20))

# выведите все оставшиеся
for value in from_10_to_20:
    print(value)


# 02
"""
Перед вами список words
Необходимо сохранить в переменной lens генератор-выражение, 
который генерирует длины слов списка words по порядку.
"""
words = ['feel', 'graduate', 'movie', 'fashionable', 'bacon', 'drop', 'produce', 'acquisition',
         'cheap', 'strength', 'master', 'perception', 'noise', 'strange', 'am']

lens = (len(el) for el in words)

# Вариант
lens = map(len, words)

for i in lens:
    print(i)

# 03
"""
Создать выражение-генератор, который будет генерировать кортеж состоящий из двух элементов: 
названия дня недели и номер дня в году.
За начало отсчета возьмем 2022 год. 
Он начался в субботу, потом воскресенье, понедельник, вторник, ..., пятница, суббота и далее по кругу
Результат выражения-генератор сохраните в переменную days

Распечатать 77 первых дней 2022 года.

Output: (1, 'Saturday')
        (2, 'Sunday')
        (3, 'Monday')
        (4, 'Tuesday')
        (5, 'Wednesday')
        (6, 'Thursday')
        (7, 'Friday')
        (8, 'Saturday')
        (9, 'Sunday')
        (10, 'Monday')
        . . .
"""
day = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

days = ((el, day[(el + 4) % 7]) for el in range(1, 78))
for el in days:
    print(el)


# Вариант
day = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

day_2022 = [day[(el + 5) % 7] for el in range(7)]
# days = enumerate(day_2022 * 11, 1)  # так работает, но проверка не пропускает
days = (el for el in enumerate(day_2022 * 11, 1))

for el in days:
    print(el)

