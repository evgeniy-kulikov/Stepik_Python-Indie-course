# 4.1 Знакомство с циклом while
""""""

"""
Напишите программу, которая распечатает все натуральные числа от 1000 до 2000 включительно.
Input:  
Output: 
    1000
    1001
    ...
    1999
    2000
"""
num = 1000
while num < 2001:
    print(num)
    num += 1


"""
Напишите программу, 
которая распечатает все натуральные числа кратные 5 от 195 до 6785 включительно в порядке убывания.
Input:  
Output: 
    6785
    6780
    ...
    200
    195
"""
num = 6785
while num > 194:
    print(num)
    num -= 5


"""
https://stepik.org/lesson/296614/step/8?thread=solutions&unit=278348
Input:  4 9
Output: 3
"""
a, b = map(int, input().split())
n = 0
while a <= b:
    a *= 3
    b *= 2
    n += 1
print(n)


"""
Удалить все цифры «4» в списке numbers и затем вывести список при помощи команды
print(*numbers)
Input:  *
Output: *
"""
numbers = [2, 3, 7, 9, 5, 0, 6, 3, 6, 0, 1, 7, 9, 4, 4, 4, 2, 2, 6, 9, 1, 7, 0, 3, 8, 1, 0, 3, 8, 0, 8, 4, 0, 2, 3,
           6, 6, 1, 5, 8, 7, 2, 3, 8, 7, 7, 1, 2, 2, 8, 4, 3, 4, 8, 0, 7, 9, 8, 3, 7, 7, 7, 7, 5, 1, 7, 4, 5, 0, 8,
           0, 9, 2, 4, 7, 6, 6, 5, 9, 7, 1, 7, 8, 8, 3, 4, 9, 7, 6, 4, 2, 0, 0, 0, 9, 4, 0, 9, 4, 4, 4, 5, 5, 4, 2,
           5, 9, 4, 8, 1, 5, 7, 1, 0, 2, 6, 8, 7, 2, 7, 9, 3, 6, 4, 7, 5, 0, 7, 2, 0, 8, 2, 9, 8, 6, 4, 4, 7, 5, 5,
           9, 4, 9, 5, 6, 9, 1, 1, 3, 1, 5, 2, 1, 7, 0, 0, 7, 8, 1, 3, 0, 0, 4, 4, 3, 3, 6, 7, 8, 6, 1, 2, 0, 2, 0,
           9, 9, 0, 5, 2, 4, 1, 7, 4, 9, 9, 4, 9, 6, 9, 2, 7, 1, 2, 4, 5, 4, 0, 9, 0]

# Многократная пробежка по списку
while 4 in numbers:
    numbers.remove(4)

# Проходим по списку только 1 раз
i = 0
while i < len(numbers):
    if numbers[i] == 4:
        del numbers[i]
        i -= 1
    i += 1

print(*numbers)


"""
На вход программе поступает слово. 
Необходимо воспроизвести процесс, в котором каждый раз у этого слово будет пропадать первая и последняя буква. 
Этот процесс необходимо закончить, когда в слове останется только одна буква или слово  станет пустой строкой. 
При этом результат каждого этапа нужно выводить
Input:  Правильность
Output: Правильность
        равильност
        авильнос
        вильно
        ильн
        ль
"""
# st = input()
st = "123"
print(st)
while len(st) > 1:
    st = st[1:-1]
    print(st)


"""
Выведите все точные квадраты натуральных чисел, не превосходящие входного натурального числа N
1^2 = 1
2^2 = 4
3^2 = 9
...
Input:  16
Output: 1
        4
        9
        16
"""
n, num = 1, int(input())
while n ** 2 <= num:
    print(n ** 2)
    n += 1


"""
В первый день спортсмен пробежал X километров. 
В каждый последующий день он увеличивал пробег на 15% от предыдущего дня. 
Необходимо определить номер дня, в который пробег спортсмена составил не менее Y километров. 
Само число Y будет поступать на вход программе.
Input:  10 20
Output: 6
"""
x, y = map(int, input().split())
d = 1
while x < y:
    x *= 1.15
    d += 1
print(d)


"""
У Васи есть n пар носков. Утром каждого дня, собираясь в школу, Вася должен надеть пару носков. 
Вечером, прийдя со школы, Вася снимает надетые носки и выбрасывает их. 
Каждый m-й день (в дни с номерами m, 2m, 3m ...) мама покупает Васе одну пару носков. 
Она делает это поздно вечером, поэтому Вася может надеть новые носки не раньше следующего дня. 
На сколько подряд идущих дней Васе хватит носков?
Входные данные: 1 <= n <= 100; 2 <= m <= 100
Input:  2 2
Output: 3
"""
n, m = map(int, input().split())
d = 0

while n > 0:
    n -= 1
    d += 1

    if d % m == 0:
        n += 1
print(d)


"""
У Василия есть "n" свечей. Когда Василий зажигает новую свечу, сначала она горит ровно один час, а затем тухнет. 
Василий из "m" потухших свечей он умеет получать одну новую свечу. 
В последствии эту новую свечу (так же как и другие новые свечи) можно зажечь.
На сколько часов освещения хватит его свечек, если он будет действовать подобным образом.
Входные данные: 1 <= n <= 100; 2 <= m <= 100
Input:  4 2
Output: 7
"""
candle, m = map(int, input().split())
hour = 0
while candle > 0:
    candle -= 1
    hour += 1
    # кол-во часов соответствует числу сгоревших свечей
    if hour % m == 0:
        candle += 1
print(hour)


"""
В архитектуре компьютера важную роль играют числа, являющиеся степенями двойки: 1, 2, 4, 8 и так далее. 
Напишите программу, которая проверяет, является ли введённое натуральное число степенью двойки. 
Если да, то выводится сама эта степень; если нет, выводится «НЕТ»
Input:  8
Output: 3

Input:  9
Output: НЕТ
"""
num = int(input())
degree = 0

while 2 ** degree < num:
    degree += 1

if 2 ** degree == num:
    print(degree)
else:
    print('НЕТ')


"""
Зимний вечер в Бурсе
Возьмём число. Умножим его на его же первую цифру. Результат умножим на первую цифру результата. И так далее:
8 * 8 = 64
6 * 64 = 384
3 * 384 = 1152
1 * 1152 = 1152
Когда первая цифра очередного числа в такой последовательности становится равной 1, числа перестают изменяться.
Начиная с числа n, умножайте имеющееся число на его первую цифру, 
пока у получившегося числа первая цифра не станет равной 1, либо пока оно не превысит миллиарда.

Input:  8
Output: 1152
"""
num = int(input())
unit = int(str(num)[0])
while unit != 1 and num <= 10 ** 9:
    num *= unit
    unit = int(str(num)[0])
print(num)

