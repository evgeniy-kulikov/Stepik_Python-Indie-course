# 4.4 Нахождение всех делителей числа
""""""

# Проверяем на делители весь числовой ряд
num = int(input())
cnt = 1
while cnt <= num:
    if num % cnt == 0:  # Найден делитель
        print(cnt, end=' ')
    cnt += 1

# Проверяем на делители ПОЛОВИНУ числового ряда (во второй половине, кроме последнего, делителей уже нет)
num = int(input())
cnt = 1
while cnt <= num // 2:
    if num % cnt == 0:  # Найден делитель
        print(cnt, end=' ')
    cnt += 1
print(num)  # Добавляем само число

"""
Предыдущие два решения имеют линейную зависимость скорости решения.
Улучшим алгоритм по скорости еще.
"""

# Улучшаем алгоритм. Подготовка 1
num = int(input())
cnt = 1
while cnt * cnt <= num:
    if num % cnt == 0:
        print(cnt, num // cnt)  # выводим пары младших и старших делителей
    cnt += 1
"""
>>> 36
1 36
2 18
3 12
4 9
6 6
"""

# Улучшаем алгоритм. Подготовка 2
num = int(input())
cnt = 1
while cnt * cnt <= num:
    if num % cnt == 0:  # Найден делитель
        if cnt == num // cnt:
            print(cnt)  # при совпадении пары младших и старших делителей, выводим только один из них
        else:
            print(cnt, num // cnt)  # выводим пары младших и старших делителей
    cnt += 1
"""
>>> 36
1 36
2 18
3 12
4 9
6
"""

# Улучшаем алгоритм. Результат 1
num = int(input())
cnt = 1
ls = []
while cnt * cnt <= num:
    if num % cnt == 0:  # Найден делитель
        if cnt == num // cnt:
            ls.append(cnt)  # при совпадении пары младших и старших делителей, выводим только один из них
        else:
            # print(cnt, num // cnt)  # выводим пары младших и старших делителей
            ls.append(cnt)
            ls.append(num // cnt)
    cnt += 1

ls.sort()
print(*ls)  # 1 2 3 4 6 9 12 18 36


# Улучшаем алгоритм. Результат 2
# Максимальная скорость работы алгоритма
num = int(input())
cnt = 1
ls = []
while cnt * cnt <= num:
    if num % cnt == 0:  # Найден делитель
        ls.append(cnt)  # фактически добавляем из пары младший делитель
        if cnt != num // cnt:  # если это пара младших и старших делителей
            ls.append(num // cnt)  # то добавляем из нее так же и старший делитель
    cnt += 1

ls.sort()
print(*ls)  # 1 2 3 4 6 9 12 18 36


#  *  *  *   Задачи   *  *  *

# Отложенные решения на отпуск (17)
# https://stepik.org/lesson/296955/step/3?unit=278683
"""
Дано натуральное число N. 
Определить, является ли оно простым. 
Натуральное число N называется простым, если у него есть только два делителя: единица и само число N. 
В качестве ответа выведите "Yes", если число простое,  "No" - в противном случае.
Input:  5
Output: Yes
"""
num = int(input())
div = 1
cnt = 0
while div <= num // 2:
    if num % div == 0:  # Найден делитель
        cnt += 1
    div += 1
print('Yes' if cnt == 1 or num == 1 else 'No')


# Отложенные решения на отпуск (18)
# https://stepik.org/lesson/296955/step/4?unit=278683
"""
Программа получает на вход натуральное число N. 
Нужно найти сумму его делителей. 
Input:  10
Output: 18
"""
num = int(input())
div = 1
sum_div = 0
while div <= num // 2:
    if num % div == 0:  # Найден делитель
        sum_div += div
    div += 1
print(sum_div + num)
