# 2.10 F-строки, дополнительные возможности
""""""
"""
К знакомому поведению:
x = 14
y = 17
print(f"x = {x}, y = {y}")
>>>
x = 14, y = 17


добавилось новое:
x = 11
y = 98
print(f"{x=}, {y=}")
#пробелы будут учтены
print(f"{x  =}, {y= }")
>>>
x=11, y=98
x  =11, y= 98
"""

"""
Формат вывода дробной части числа
Запись c:.3f говорит, что  переменную c нужно представить в вещественном виде (это знак f) 
и отобразить три символа после запятой. Если у переменной c не хватает символов для трех знаков, 
проставятся нули. Если символов в избытке, произойдет округление до третьего символа после запятой.

a = 1/8
b = 1/2
c = 1/3

print(f'{a = :.3f}')
a = 0.125

print(f'{b = :.3f}')
b = 0.500

print(f'{c = :.3f}')
c = 0.333

print(f'{c:.3f}')
0.333

print(f'{c:.1f}')
0.3

print(f'{c:.2f}')
0.33

print(f'{c:.10f}')
0.3333333333

Над целыми числами тоже можно так
print(f'{d:.1f}')
100.0

print(f'{d:.3f}')
100.000
"""

"""
Выравнивание
<	Выравнивает выражение в фигурных скобках по левому краю. У строк такое поведение по умолчанию
>	Выравнивает выражение в фигурных скобках по правому краю. У чисел такое поведение по умолчанию
^	Выравнивает выражение в фигурных скобках по центру
В нижерасположенных примерах:
Символы "|" используются в f-строке, чтобы помочь очертить интервал.
Число после «:» указывает на количество символов в ширину.

number = 12345.6789
print(f"Число {number = }")
>>> Число number = 12345.6789

print(f"|{number:25}|")
>>> |               12345.6789|

print(f"|{number:<25}|")
>>> |12345.6789               |

print(f"|{number:>25}|")
>>> |               12345.6789|

print(f"|{number:^25}|")
>>> |       12345.6789        |



text = "Python 3.10"
print(f"Строка {text = }")
>>> Строка text = 'Python 3.10'

print(f"|{text:25}|")
>>> |Python 3.10              |

print(f"|{text:<25}|")
>>> |Python 3.10              |

print(f"|{text:>25}|")
>>> |              Python 3.10|

print(f"|{text:^25}|")
>>> |       Python 3.10       |


По умолчанию символом заполнителем является пробел, но можно его заменить на другое значение:
number = 12345.6789
print(f"Число {number = }")
>>> Число number = 12345.6789

print(f"|{number:=<25}|")
>>> |12345.6789===============|

print(f"|{number:=>25}|")
>>> |===============12345.6789|

print(f"|{number:=^25}|")
>>> |=======12345.6789========|


text = "Python 3.10"
print(f"Строка {text = }")
>>> Строка text = 'Python 3.10'

print(f"|{text:-<25}|")
>>> |Python 3.10--------------|

print(f"|{text:!>25}|")
>>> |!!!!!!!!!!!!!!Python 3.10|

print(f"|{text:?^25}|")
>>> |???????Python 3.10???????|

"""
# Практический пример выравнивания:
APPLES = .50
BREAD = 1.50
CHEESE = 2.25
num_apples = 3
num_bread = 10
num_cheese = 6
price_apples = num_apples * APPLES
price_bread = num_bread * BREAD
price_cheese = num_cheese * CHEESE
str_apples = 'Яблоки'
str_bread = 'Хлеб'
str_cheese = 'Сыр'
total = price_bread + price_cheese + price_apples
print(f'{"Список покупок":^30s}')
print(f'{"=" * 30}')
print(f'{str_apples:10s}{num_apples:10d}\t${price_apples:>5.2f}')
print(f'{str_bread:10s}{num_bread:10d}\t${price_bread:>5.2f}')
print(f'{str_cheese:10s}{num_cheese:10d}\t${price_cheese:>5.2f}')
print(f'{"Total:":>20s}\t${total:>5.2f}')
"""
        Список покупок        
==============================
Яблоки             3	$ 1.50
Хлеб              10	$15.00
Сыр                6	$13.50
              Total:	$30.00
"""



# Task
"""
Напишите программу, чтобы выводилось только шесть знаков после запятой у переменной number_pi
Input:  3.141592653589793
Output: 3.141593
"""
number_pi = 3.141592653589793
print(f'{number_pi:.6f}')


"""
Принять вещественное число, и вывести его в формате двух знаков после запятой
Input:  43.32134323
Output: 43.32
"""
num = float(input())
print(f'{num:.2f}')


"""
Вводится целое число, необходимо выполнить выравнивание его по центру, 
отведя 15 символов под отображение числа. 
Символом заполнителем должен являться знак дефиса -
Input:  17
Output: ------17-------
"""
num = int(input())
print(f'{num:-^15}')


"""
Вам необходимо подправить код ниже так, чтобы он выравнивал
первый print по центру
второй print по правому краю
третий print по левому краю
Количество знаков для выравнивания 20 символов, знак разделителя - &
Input:  Лосось
Output: |&&&&&&&Лосось&&&&&&&|
        |&&&&&&&&&&&&&&Лосось|
        |Лосось&&&&&&&&&&&&&&|
"""
text = input()
print(f"|{text:&^20}|")
print(f"|{text:&>20}|")
print(f"|{text:&<20}|")
